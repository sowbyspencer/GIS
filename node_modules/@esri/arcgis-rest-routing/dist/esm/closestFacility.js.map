{"version":3,"file":"closestFacility.js","sourceRoot":"","sources":["../../src/closestFacility.ts"],"names":[],"mappings":"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","sourcesContent":["/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  appendCustomParams,\n  ILocation,\n  IPoint,\n  IFeature,\n  IFeatureSet\n} from \"@esri/arcgis-rest-request\";\n\nimport {\n  ARCGIS_ONLINE_CLOSEST_FACILITY_URL,\n  IEndpointOptions,\n  normalizeLocationsList,\n  isFeatureSet,\n  isJsonWithURL\n} from \"./helpers.js\";\n\nimport { arcgisToGeoJSON } from \"@terraformer/arcgis\";\n\nexport interface IClosestFacilityOptions extends IEndpointOptions {\n  /**\n   * Specify one or more locations from which the service searches for the nearby locations. These locations are referred to as incidents.\n   */\n  incidents:\n    | Array<IPoint | ILocation | [number, number]>\n    | IFeatureSet\n    | { url: string };\n\n  /**\n   * Specify one or more locations that are searched for when finding the closest location.\n   */\n  facilities:\n    | Array<IPoint | ILocation | [number, number]>\n    | IFeatureSet\n    | { url: string };\n  /**\n   *  Specify if the service should return routes.\n   */\n  returnCFRoutes: boolean;\n  travelDirection?: \"incidentsToFacilities\" | \"facilitiesToIncidents\";\n  barriers?: Array<IPoint | ILocation | [number, number]> | IFeatureSet;\n  polylineBarriers?: IFeatureSet;\n  polygonBarriers?: IFeatureSet;\n  returnDirections?: boolean;\n  directionsOutputType?:\n    | \"esriDOTComplete\"\n    | \"esriDOTCompleteNoEvents\"\n    | \"esriDOTInstructionsOnly\"\n    | \"esriDOTStandard\"\n    | \"esriDOTSummaryOnly\"\n    | \"esriDOTFeatureSets\";\n  directionsLengthUnits?:\n    | \"esriNAUCentimeters\"\n    | \"esriNAUDecimalDegrees\"\n    | \"esriNAUDecimeters\"\n    | \"esriNAUFeet\"\n    | \"esriNAUInches\"\n    | \"esriNAUKilometers\"\n    | \"esriNAUMeters\"\n    | \"esriNAUMiles\"\n    | \"esriNAUMillimeters\"\n    | \"esriNAUNauticalMiles\"\n    | \"esriNAUPoints\"\n    | \"esriNAUYards\";\n  outputLines?: boolean;\n  returnFacilities?: boolean;\n  returnIncidents?: boolean;\n  returnBarriers?: boolean;\n  returnPolylineBarriers?: boolean;\n  returnPolygonBarriers?: boolean;\n  preserveObjectID?: boolean;\n}\n\ninterface IFeatureSetWithGeoJson extends IFeatureSet {\n  geoJson?: any;\n}\n\nexport interface IClosestFacilityResponse {\n  messages: string[];\n  routes?: IFeatureSetWithGeoJson;\n  directions?: Array<{\n    routeId: number;\n    routeName: string;\n    summary: object;\n    features: IFeature[];\n  }>;\n  incidents?: IFeatureSet;\n  facilities?: IFeatureSet;\n  barriers?: IFeatureSet;\n  polygonBarriers?: IFeatureSet;\n  polylineBarriers?: IFeatureSet;\n}\n\nfunction getTravelDirection(\n  key: \"incidentsToFacilities\" | \"facilitiesToIncidents\"\n): \"esriNATravelDirectionFromFacility\" | \"esriNATravelDirectionToFacility\" {\n  if (key === \"incidentsToFacilities\") {\n    return \"esriNATravelDirectionFromFacility\";\n  } else {\n    return \"esriNATravelDirectionToFacility\";\n  }\n}\n\n/**\n * Used to find a route to the nearest of several possible destinations. See the [REST Documentation](https://developers.arcgis.com/rest/network/api-reference/closest-facility-synchronous-service.htm) for more information.\n *\n * ```js\n * import { closestFacility } from '@esri/arcgis-rest-routing';\n *\n * closestFacility({\n *   incidents: [\n *     [-90.404302, 38.600621],\n *     [-90.364293, 38.620427],\n *    ],\n *   facilities: [\n *     [-90.444716, 38.635501],\n *     [-90.311919, 38.633523],\n *     [-90.451147, 38.581107]\n *    ],\n *    authentication\n * })\n *   .then(response) // => {routes: {features: [{attributes: { ... }, geometry:{ ... }}]}\n * ```\n *\n * @param requestOptions Options to pass through to the routing service.\n * @returns A Promise that will resolve with routes and directions for the request.\n * @restlink https://developers.arcgis.com/rest/network/api-reference/closest-facility-synchronous-service.htm\n * @inline IClosestFacilityOptions\n */\nexport function closestFacility(\n  requestOptions: IClosestFacilityOptions\n): Promise<IClosestFacilityResponse> {\n  const endpoint =\n    requestOptions.endpoint || ARCGIS_ONLINE_CLOSEST_FACILITY_URL;\n\n  requestOptions.params = {\n    returnFacilities: true,\n    returnDirections: true,\n    returnIncidents: true,\n    returnBarriers: true,\n    returnPolylineBarriers: true,\n    returnPolygonBarriers: true,\n    preserveObjectID: true,\n    ...requestOptions.params\n  };\n\n  const options = appendCustomParams<IClosestFacilityOptions>(requestOptions, [\n    \"returnCFRoutes\",\n    // \"travelDirection\",\n    \"barriers\",\n    \"polylineBarriers\",\n    \"polygonBarriers\",\n    \"returnDirections\",\n    \"directionsOutputType\",\n    \"directionsLengthUnits\",\n    \"outputLines\",\n    \"returnFacilities\",\n    \"returnIncidents\",\n    \"returnBarriers\",\n    \"returnPolylineBarriers\",\n    \"returnPolygonBarriers\",\n    \"preserveObjectID\"\n  ]);\n\n  // Set travelDirection\n  if (requestOptions.travelDirection) {\n    options.params.travelDirection = getTravelDirection(\n      requestOptions.travelDirection\n    );\n  }\n\n  // the SAAS service does not support anonymous requests\n  if (\n    !requestOptions.authentication &&\n    endpoint === ARCGIS_ONLINE_CLOSEST_FACILITY_URL\n  ) {\n    return Promise.reject(\n      \"Finding the closest facility using the ArcGIS service requires authentication\"\n    );\n  }\n\n  if (\n    isFeatureSet(requestOptions.incidents) ||\n    isJsonWithURL(requestOptions.incidents)\n  ) {\n    options.params.incidents = requestOptions.incidents;\n  } else {\n    options.params.incidents = normalizeLocationsList(\n      requestOptions.incidents\n    ).join(\";\");\n  }\n\n  if (\n    isFeatureSet(requestOptions.facilities) ||\n    isJsonWithURL(requestOptions.facilities)\n  ) {\n    options.params.facilities = requestOptions.facilities;\n  } else {\n    options.params.facilities = normalizeLocationsList(\n      requestOptions.facilities\n    ).join(\";\");\n  }\n\n  // optional input param that may need point geometry normalizing\n  if (requestOptions.barriers) {\n    if (isFeatureSet(requestOptions.barriers)) {\n      options.params.barriers = requestOptions.barriers;\n    } else {\n      // optional point geometry barriers must be normalized, too\n      // but not if provided as IFeatureSet type\n      // note that optional polylineBarriers and polygonBarriers do not need to be normalized\n      options.params.barriers = normalizeLocationsList(\n        requestOptions.barriers\n      ).join(\";\");\n    }\n  }\n\n  return request(`${cleanUrl(endpoint)}/solveClosestFacility`, options).then(\n    cleanResponse\n  );\n}\n\nfunction cleanResponse(res: any): IClosestFacilityResponse {\n  // add \"geoJson\" property to \"routes\"\n  if (res.routes.spatialReference.wkid === 4326) {\n    res.routes.geoJson = arcgisToGeoJSON(res.routes);\n  }\n  return res;\n}\n\nexport default {\n  closestFacility\n};\n"]}