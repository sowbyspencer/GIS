{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../../src/helpers.ts"],"names":[],"mappings":"AAAA;gBACgB;AAWhB,eAAe;AACf,MAAM,CAAC,MAAM,yBAAyB,GACpC,gFAAgF,CAAC;AACnF,MAAM,CAAC,MAAM,kCAAkC,GAC7C,oGAAoG,CAAC;AACvG,MAAM,CAAC,MAAM,8BAA8B,GACzC,6FAA6F,CAAC;AAChG,MAAM,CAAC,MAAM,2CAA2C,GACtD,4HAA4H,CAAC;AAU/H,SAAS,eAAe,CACtB,MAAwE;IAExE,OAAO,CACJ,MAA2B,CAAC,MAAM,KAAK,CAAC;QACxC,MAAmC,CAAC,MAAM,KAAK,CAAC,CAClD,CAAC;AACJ,CAAC;AAED,SAAS,UAAU,CACjB,MAAwE;IAExE,OAAO,CACJ,MAAoB,CAAC,QAAQ,KAAK,SAAS;QAC3C,MAAoB,CAAC,GAAG,KAAK,SAAS,CACxC,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,sBAAsB,CACpC,SAAuD;IAEvD,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;QAC9B,IAAI,eAAe,CAAC,MAAM,CAAC,EAAE;YAC3B,OAAO,MAAM,CAAC,IAAI,EAAE,CAAC;SACtB;aAAM,IAAI,UAAU,CAAC,MAAM,CAAC,EAAE;YAC7B,IAAI,MAAM,CAAC,GAAG,EAAE;gBACd,OAAO,MAAM,CAAC,IAAI,GAAG,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;aACvC;iBAAM;gBACL,OAAO,MAAM,CAAC,SAAS,GAAG,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC;aACjD;SACF;aAAM;YACL,OAAO,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC;SAClC;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,GAAW;IAC5C,IAAI,SAAS,GAAG,CAAC,CAAC;IAClB,IAAI,SAAS,GAAG,CAAC,CAAC;IAClB,MAAM,MAAM,GAAG,EAAE,CAAC;IAClB,IAAI,CAAC,CAAC;IACN,IAAI,CAAC,CAAC;IAEN,2DAA2D;IAC3D,MAAM,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;IAE7C,gDAAgD;IAChD,MAAM,WAAW,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IAE7C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;QAC1C,kCAAkC;QAClC,8DAA8D;QAC9D,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,SAAS,CAAC;QACzC,SAAS,GAAG,CAAC,CAAC;QAEd,oCAAoC;QACpC,8DAA8D;QAC9D,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,SAAS,CAAC;QAC7C,SAAS,GAAG,CAAC,CAAC;QAEd,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,WAAW,EAAE,CAAC,GAAG,WAAW,CAAe,CAAC,CAAC;KAC/D;IAED,OAAO;QACL,KAAK,EAAE,CAAC,MAAM,CAAC;KACH,CAAC;AACjB,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,YAAY,CAAC,GAAQ;IACnC,OAAO,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;AAC/D,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,aAAa,CAAC,GAAQ;IACpC,OAAO,KAAK,IAAI,GAAG,CAAC;AACtB,CAAC","sourcesContent":["/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  IRequestOptions,\n  ILocation,\n  IPoint,\n  IPolyline,\n  Position2D,\n  IFeatureSet\n} from \"@esri/arcgis-rest-request\";\n\n// https always\nexport const ARCGIS_ONLINE_ROUTING_URL =\n  \"https://route.arcgis.com/arcgis/rest/services/World/Route/NAServer/Route_World\";\nexport const ARCGIS_ONLINE_CLOSEST_FACILITY_URL =\n  \"https://route.arcgis.com/arcgis/rest/services/World/ClosestFacility/NAServer/ClosestFacility_World\";\nexport const ARCGIS_ONLINE_SERVICE_AREA_URL =\n  \"https://route.arcgis.com/arcgis/rest/services/World/ServiceAreas/NAServer/ServiceArea_World\";\nexport const ARCGIS_ONLINE_ORIGIN_DESTINATION_MATRIX_URL =\n  \"https://route.arcgis.com/arcgis/rest/services/World/OriginDestinationCostMatrix/NAServer/OriginDestinationCostMatrix_World\";\n\n// nice to have: verify custom endpoints contain 'NAServer' and end in a '/'\nexport interface IEndpointOptions extends IRequestOptions {\n  /**\n   * Any ArcGIS Routing service (example: https://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Network/USA/NAServer/Route/ ) to use for the routing service request.\n   */\n  endpoint?: string;\n}\n\nfunction isLocationArray(\n  coords: ILocation | IPoint | [number, number] | [number, number, number]\n): coords is [number, number] | [number, number, number] {\n  return (\n    (coords as [number, number]).length === 2 ||\n    (coords as [number, number, number]).length === 3\n  );\n}\n\nfunction isLocation(\n  coords: ILocation | IPoint | [number, number] | [number, number, number]\n): coords is ILocation {\n  return (\n    (coords as ILocation).latitude !== undefined ||\n    (coords as ILocation).lat !== undefined\n  );\n}\n\nexport function normalizeLocationsList(\n  locations: Array<IPoint | ILocation | [number, number]>\n): string[] {\n  return locations.map((coords) => {\n    if (isLocationArray(coords)) {\n      return coords.join();\n    } else if (isLocation(coords)) {\n      if (coords.lat) {\n        return coords.long + \",\" + coords.lat;\n      } else {\n        return coords.longitude + \",\" + coords.latitude;\n      }\n    } else {\n      return coords.x + \",\" + coords.y;\n    }\n  });\n}\n\nexport function decompressGeometry(str: string) {\n  let xDiffPrev = 0;\n  let yDiffPrev = 0;\n  const points = [];\n  let x;\n  let y;\n\n  // Split the string into an array on the + and - characters\n  const strings = str.match(/((\\+|-)[^+-]+)/g);\n\n  // The first value is the coefficient in base 32\n  const coefficient = parseInt(strings[0], 32);\n\n  for (let j = 1; j < strings.length; j += 2) {\n    // j is the offset for the x value\n    // Convert the value from base 32 and add the previous x value\n    x = parseInt(strings[j], 32) + xDiffPrev;\n    xDiffPrev = x;\n\n    // j+1 is the offset for the y value\n    // Convert the value from base 32 and add the previous y value\n    y = parseInt(strings[j + 1], 32) + yDiffPrev;\n    yDiffPrev = y;\n\n    points.push([x / coefficient, y / coefficient] as Position2D);\n  }\n\n  return {\n    paths: [points]\n  } as IPolyline;\n}\n\n/**\n * User Defined Type Guard that verifies this is a featureSet\n */\nexport function isFeatureSet(arg: any): arg is IFeatureSet {\n  return Object.prototype.hasOwnProperty.call(arg, \"features\");\n}\n\n/**\n * User Defined Type Guard that verifies this is a JSON with `url` property\n */\nexport function isJsonWithURL(arg: any): arg is Object {\n  return \"url\" in arg;\n}\n"]}