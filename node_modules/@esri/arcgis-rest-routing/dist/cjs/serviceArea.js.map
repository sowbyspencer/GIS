{"version":3,"file":"serviceArea.js","sourceRoot":"","sources":["../../src/serviceArea.ts"],"names":[],"mappings":";AAAA;gBACgB;;;AAEhB,mEAOmC;AAEnC,6CAKsB;AAEtB,gDAAsD;AAoCtD,SAAS,kBAAkB,CACzB,GAAsD;IAEtD,IAAI,GAAG,KAAK,uBAAuB,EAAE;QACnC,OAAO,mCAAmC,CAAC;KAC5C;SAAM;QACL,OAAO,iCAAiC,CAAC;KAC1C;AACH,CAAC;AAED;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,SAAgB,WAAW,CACzB,cAAmC;IAEnC,MAAM,QAAQ,GAAG,cAAc,CAAC,QAAQ,IAAI,2CAA8B,CAAC;IAE3E,cAAc,CAAC,MAAM,mBACnB,gBAAgB,EAAE,IAAI,EACtB,cAAc,EAAE,IAAI,EACpB,sBAAsB,EAAE,IAAI,EAC5B,qBAAqB,EAAE,IAAI,EAC3B,gBAAgB,EAAE,IAAI,IACnB,cAAc,CAAC,MAAM,CACzB,CAAC;IAEF,MAAM,OAAO,GAAG,IAAA,wCAAkB,EAAsB,cAAc,EAAE;QACtE,UAAU;QACV,kBAAkB;QAClB,iBAAiB;QACjB,aAAa;QACb,kBAAkB;QAClB,gBAAgB;QAChB,wBAAwB;QACxB,uBAAuB;QACvB,kBAAkB;KACnB,CAAC,CAAC;IAEH,sBAAsB;IACtB,IAAI,cAAc,CAAC,eAAe,EAAE;QAClC,OAAO,CAAC,MAAM,CAAC,eAAe,GAAG,kBAAkB,CACjD,cAAc,CAAC,eAAe,CAC/B,CAAC;KACH;IAED,uDAAuD;IACvD,IACE,CAAC,cAAc,CAAC,cAAc;QAC9B,QAAQ,KAAK,2CAA8B,EAC3C;QACA,OAAO,OAAO,CAAC,MAAM,CACnB,wEAAwE,CACzE,CAAC;KACH;IAED,IAAI,IAAA,yBAAY,EAAC,cAAc,CAAC,UAAU,CAAC,EAAE;QAC3C,OAAO,CAAC,MAAM,CAAC,UAAU,GAAG,cAAc,CAAC,UAAU,CAAC;KACvD;SAAM;QACL,OAAO,CAAC,MAAM,CAAC,UAAU,GAAG,IAAA,mCAAsB,EAChD,cAAc,CAAC,UAAU,CAC1B,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KACb;IAED,gEAAgE;IAChE,IAAI,cAAc,CAAC,QAAQ,EAAE;QAC3B,IAAI,IAAA,yBAAY,EAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;YACzC,OAAO,CAAC,MAAM,CAAC,QAAQ,GAAG,cAAc,CAAC,QAAQ,CAAC;SACnD;aAAM;YACL,2DAA2D;YAC3D,0CAA0C;YAC1C,uFAAuF;YACvF,OAAO,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAA,mCAAsB,EAC9C,cAAc,CAAC,QAAQ,CACxB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACb;KACF;IAED,OAAO,IAAA,6BAAO,EAAC,GAAG,IAAA,8BAAQ,EAAC,QAAQ,CAAC,mBAAmB,EAAE,OAAO,CAAC,CAAC,IAAI,CACpE,aAAa,CACd,CAAC;AACJ,CAAC;AApED,kCAoEC;AAED,SAAS,aAAa,CAAC,GAAQ;IAC7B,yDAAyD;IACzD,OAAO,GAAG,CAAC,UAAU,CAAC,YAAY,CAAC;IAEnC,yCAAyC;IACzC,IAAI,GAAG,CAAC,UAAU,CAAC,gBAAgB,CAAC,IAAI,KAAK,IAAI,EAAE;QACjD,GAAG,CAAC,UAAU,CAAC,OAAO,GAAG,IAAA,wBAAe,EAAC,GAAG,CAAC,UAAU,CAAC,CAAC;KAC1D;IACD,OAAO,GAAG,CAAC;AACb,CAAC;AAED,kBAAe;IACb,WAAW;CACZ,CAAC","sourcesContent":["/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  appendCustomParams,\n  ILocation,\n  IPoint,\n  IFeatureSet\n} from \"@esri/arcgis-rest-request\";\n\nimport {\n  ARCGIS_ONLINE_SERVICE_AREA_URL,\n  IEndpointOptions,\n  normalizeLocationsList,\n  isFeatureSet\n} from \"./helpers.js\";\n\nimport { arcgisToGeoJSON } from \"@terraformer/arcgis\";\n\nexport interface IServiceAreaOptions extends IEndpointOptions {\n  /**\n   *  Specify one or more locations around which service areas are generated.\n   */\n  facilities: Array<IPoint | ILocation | [number, number]> | IFeatureSet;\n  /**\n   *  Specify if the service should return routes.\n   */\n  travelDirection?: \"incidentsToFacilities\" | \"facilitiesToIncidents\";\n  barriers?: Array<IPoint | ILocation | [number, number]> | IFeatureSet;\n  polylineBarriers?: IFeatureSet;\n  polygonBarriers?: IFeatureSet;\n  outputLines?: boolean;\n  returnFacilities?: boolean;\n  returnBarriers?: boolean;\n  returnPolylineBarriers?: boolean;\n  returnPolygonBarriers?: boolean;\n  preserveObjectID?: boolean;\n}\n\ninterface IFeatureSetWithGeoJson extends IFeatureSet {\n  geoJson?: any;\n}\n\nexport interface IServiceAreaResponse {\n  messages: string[];\n  saPolygons?: IFeatureSetWithGeoJson;\n  incidents?: IFeatureSet;\n  facilities?: IFeatureSet;\n  barriers?: IFeatureSet;\n  polygonBarriers?: IFeatureSet;\n  polylineBarriers?: IFeatureSet;\n}\n\nfunction getTravelDirection(\n  key: \"incidentsToFacilities\" | \"facilitiesToIncidents\"\n): \"esriNATravelDirectionFromFacility\" | \"esriNATravelDirectionToFacility\" {\n  if (key === \"incidentsToFacilities\") {\n    return \"esriNATravelDirectionFromFacility\";\n  } else {\n    return \"esriNATravelDirectionToFacility\";\n  }\n}\n\n/**\n * Used to find the area that can be reached from the input location within a given travel time or travel distance. See the [REST Documentation](https://developers.arcgis.com/rest/network/api-reference/service-area-synchronous-service.htm) for more information.\n *\n * ```js\n * import { serviceArea } from '@esri/arcgis-rest-routing';\n *\n * serviceArea({\n *   facilities: [\n *     [-90.444716, 38.635501],\n *     [-90.311919, 38.633523],\n *     [-90.451147, 38.581107]\n *    ],\n *    authentication\n * })\n *   .then(response) // => {routes: {features: [{attributes: { ... }, geometry:{ ... }}]}\n * ```\n *\n * @param requestOptions Options to pass through to the routing service.\n * @returns A Promise that will resolve with service area polygons for the request.\n * @restlink https://developers.arcgis.com/rest/network/api-reference/service-area-synchronous-service.htm\n */\nexport function serviceArea(\n  requestOptions: IServiceAreaOptions\n): Promise<IServiceAreaResponse> {\n  const endpoint = requestOptions.endpoint || ARCGIS_ONLINE_SERVICE_AREA_URL;\n\n  requestOptions.params = {\n    returnFacilities: true,\n    returnBarriers: true,\n    returnPolylineBarriers: true,\n    returnPolygonBarriers: true,\n    preserveObjectID: true,\n    ...requestOptions.params\n  };\n\n  const options = appendCustomParams<IServiceAreaOptions>(requestOptions, [\n    \"barriers\",\n    \"polylineBarriers\",\n    \"polygonBarriers\",\n    \"outputLines\",\n    \"returnFacilities\",\n    \"returnBarriers\",\n    \"returnPolylineBarriers\",\n    \"returnPolygonBarriers\",\n    \"preserveObjectID\"\n  ]);\n\n  // Set travelDirection\n  if (requestOptions.travelDirection) {\n    options.params.travelDirection = getTravelDirection(\n      requestOptions.travelDirection\n    );\n  }\n\n  // the SAAS service does not support anonymous requests\n  if (\n    !requestOptions.authentication &&\n    endpoint === ARCGIS_ONLINE_SERVICE_AREA_URL\n  ) {\n    return Promise.reject(\n      \"Finding service areas using the ArcGIS service requires authentication\"\n    );\n  }\n\n  if (isFeatureSet(requestOptions.facilities)) {\n    options.params.facilities = requestOptions.facilities;\n  } else {\n    options.params.facilities = normalizeLocationsList(\n      requestOptions.facilities\n    ).join(\";\");\n  }\n\n  // optional input param that may need point geometry normalizing\n  if (requestOptions.barriers) {\n    if (isFeatureSet(requestOptions.barriers)) {\n      options.params.barriers = requestOptions.barriers;\n    } else {\n      // optional point geometry barriers must be normalized, too\n      // but not if provided as IFeatureSet type\n      // note that optional polylineBarriers and polygonBarriers do not need to be normalized\n      options.params.barriers = normalizeLocationsList(\n        requestOptions.barriers\n      ).join(\";\");\n    }\n  }\n\n  return request(`${cleanUrl(endpoint)}/solveServiceArea`, options).then(\n    cleanResponse\n  );\n}\n\nfunction cleanResponse(res: any): IServiceAreaResponse {\n  // remove \"fieldAliases\" because it does not do anything.\n  delete res.saPolygons.fieldAliases;\n\n  // add \"geoJson\" property to \"saPolygons\"\n  if (res.saPolygons.spatialReference.wkid === 4326) {\n    res.saPolygons.geoJson = arcgisToGeoJSON(res.saPolygons);\n  }\n  return res;\n}\n\nexport default {\n  serviceArea\n};\n"]}