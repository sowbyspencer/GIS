{"version":3,"file":"originDestinationMatrix.js","sourceRoot":"","sources":["../../src/originDestinationMatrix.ts"],"names":[],"mappings":"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","sourcesContent":["/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  appendCustomParams,\n  IRequestOptions,\n  ILocation,\n  IPoint,\n  IFeatureSet\n} from \"@esri/arcgis-rest-request\";\n\nimport {\n  ARCGIS_ONLINE_ORIGIN_DESTINATION_MATRIX_URL,\n  IEndpointOptions,\n  normalizeLocationsList,\n  isFeatureSet\n} from \"./helpers.js\";\n\nimport { arcgisToGeoJSON } from \"@terraformer/arcgis\";\n\nexport interface IOriginDestinationMatrixOptions extends IEndpointOptions {\n  /**\n   *  Specify the starting points from which to travel to the destinations.\n   */\n  origins: Array<IPoint | ILocation | [number, number]> | IFeatureSet;\n  /**\n   *  Specify the ending point locations to travel to from the origins.\n   */\n  destinations: Array<IPoint | ILocation | [number, number]> | IFeatureSet;\n  /**\n   *  Specify the type of output returned by the service. Defaults to \"esriNAODOutputSparseMatrix\".\n   */\n  outputType?:\n    | \"esriNAODOutputSparseMatrix\"\n    | \"esriNAODOutputStraightLines\"\n    | \"esriNAODOutputNoLines\";\n  barriers?: Array<IPoint | ILocation | [number, number]> | IFeatureSet;\n  polylineBarriers?: IFeatureSet;\n  polygonBarriers?: IFeatureSet;\n  returnOrigins?: boolean;\n  returnDestinations?: boolean;\n  returnBarriers?: boolean;\n  returnPolylineBarriers?: boolean;\n  returnPolygonBarriers?: boolean;\n}\n\ninterface IFeatureSetWithGeoJson extends IFeatureSet {\n  geoJson?: any;\n}\n\nexport interface IOriginDestinationMatrixResponse {\n  messages: [{ type: number; description: string }];\n  /**\n   *  Only present if outputType is \"esriNAODOutputSparseMatrix\". Full description is available at https://developers.arcgis.com/rest/network/api-reference/origin-destination-cost-matrix-synchronous-service.htm#ESRI_SECTION2_114F8364507C4B56B780DFAD505270FB.\n   */\n  odCostMatrix?: any;\n  /**\n   *  Only present if outputType is \"esriNAODOutputStraightLines\" or \"esriNAODOutputNoLines\". Includes the geometry for the straight line connecting each origin-destination pair when the outputType is \"esriNAODOutputStraightLines\".\n   */\n  odLines?: IFeatureSetWithGeoJson;\n  origins?: IFeatureSetWithGeoJson;\n  destinations?: IFeatureSetWithGeoJson;\n  barriers?: IFeatureSetWithGeoJson;\n  polylineBarriers?: IFeatureSetWithGeoJson;\n  polygonBarriers?: IFeatureSetWithGeoJson;\n}\n\n/**\n * Used to create an origin-destination (OD) cost matrix from multiple origins to multiple destinations. See the [REST Documentation](https://developers.arcgis.com/rest/network/api-reference/origin-destination-cost-matrix-synchronous-service.htm) for more information.\n *\n * ```js\n * import { originDestinationMatrix } from '@esri/arcgis-rest-routing';\n *\n * originDestinationMatrix({\n *   origins: [\n *     [-90.404302, 38.600621],\n *     [-90.364293, 38.620427],\n *   ],\n *   destinations: [\n *     [-90.444716, 38.635501],\n *     [-90.311919, 38.633523],\n *     [-90.451147, 38.581107]\n *   ],\n *   authentication\n * })\n *   .then(response) // => { ... }\n * ```\n *\n * @param requestOptions Options to pass through to the routing service.\n * @returns A Promise that will resolve with travel time and/or distance for each origin-destination pair. It returns either odLines or odCostMatrix for this information depending on the outputType you specify.\n * @restlink https://developers.arcgis.com/rest/network/api-reference/origin-destination-cost-matrix-synchronous-service.htm\n */\nexport function originDestinationMatrix(\n  requestOptions: IOriginDestinationMatrixOptions\n): Promise<IOriginDestinationMatrixResponse> {\n  const endpoint =\n    requestOptions.endpoint || ARCGIS_ONLINE_ORIGIN_DESTINATION_MATRIX_URL;\n\n  requestOptions.params = {\n    outputType: \"esriNAODOutputSparseMatrix\",\n    returnOrigins: true,\n    returnDestinations: true,\n    returnBarriers: true,\n    returnPolylineBarriers: true,\n    returnPolygonBarriers: true,\n    ...requestOptions.params\n  };\n\n  const options = appendCustomParams<IOriginDestinationMatrixOptions>(\n    requestOptions,\n    [\n      \"outputType\",\n      \"barriers\",\n      \"polylineBarriers\",\n      \"polygonBarriers\",\n      \"returnOrigins\",\n      \"returnDestinations\",\n      \"returnBarriers\",\n      \"returnPolylineBarriers\",\n      \"returnPolygonBarriers\"\n    ]\n  );\n\n  // the SAAS service does not support anonymous requests\n  if (\n    !requestOptions.authentication &&\n    endpoint === ARCGIS_ONLINE_ORIGIN_DESTINATION_MATRIX_URL\n  ) {\n    return Promise.reject(\n      \"Calculating the origin-destination cost matrix using the ArcGIS service requires authentication\"\n    );\n  }\n\n  // use a formatting helper for input params of this type: Array<IPoint | ILocation | [number, number]>\n  if (isFeatureSet(requestOptions.origins)) {\n    options.params.origins = requestOptions.origins;\n  } else {\n    options.params.origins = normalizeLocationsList(\n      requestOptions.origins\n    ).join(\";\");\n  }\n\n  if (isFeatureSet(requestOptions.destinations)) {\n    options.params.destinations = requestOptions.destinations;\n  } else {\n    options.params.destinations = normalizeLocationsList(\n      requestOptions.destinations\n    ).join(\";\");\n  }\n\n  // optional input param that may need point geometry normalizing\n  if (requestOptions.barriers) {\n    if (isFeatureSet(requestOptions.barriers)) {\n      options.params.barriers = requestOptions.barriers;\n    } else {\n      // optional point geometry barriers must be normalized, too\n      // but not if provided as IFeatureSet type\n      // note that optional polylineBarriers and polygonBarriers do not need to be normalized\n      options.params.barriers = normalizeLocationsList(\n        requestOptions.barriers\n      ).join(\";\");\n    }\n  }\n\n  return request(`${cleanUrl(endpoint)}/solveODCostMatrix`, options).then(\n    function (res) {\n      return cleanResponse(res, options);\n    }\n  );\n}\n\nfunction cleanResponse(\n  res: any,\n  options: IRequestOptions\n): IOriginDestinationMatrixResponse {\n  // add \"geoJson\" property to each response property that is an arcgis featureSet\n\n  // res.odLines only exists and only includes geometry in this condition (out of 3 possible options.params.outputType conditions)\n  if (\n    options.params.outputType === \"esriNAODOutputStraightLines\" &&\n    res.odLines &&\n    res.odLines.spatialReference.wkid === 4326\n  ) {\n    res.odLines.geoJson = arcgisToGeoJSON(res.odLines);\n  }\n\n  if (res.origins && res.origins.spatialReference.wkid === 4326) {\n    res.origins.geoJson = arcgisToGeoJSON(res.origins);\n  }\n\n  if (res.destinations && res.destinations.spatialReference.wkid === 4326) {\n    res.destinations.geoJson = arcgisToGeoJSON(res.destinations);\n  }\n\n  if (res.barriers && res.barriers.spatialReference.wkid === 4326) {\n    res.barriers.geoJson = arcgisToGeoJSON(res.barriers);\n  }\n\n  if (\n    res.polygonBarriers &&\n    res.polygonBarriers.spatialReference.wkid === 4326\n  ) {\n    res.polygonBarriers.geoJson = arcgisToGeoJSON(res.polygonBarriers);\n  }\n\n  if (\n    res.polylineBarriers &&\n    res.polylineBarriers.spatialReference.wkid === 4326\n  ) {\n    res.polylineBarriers.geoJson = arcgisToGeoJSON(res.polylineBarriers);\n  }\n\n  return res;\n}\n\nexport default {\n  originDestinationMatrix\n};\n"]}