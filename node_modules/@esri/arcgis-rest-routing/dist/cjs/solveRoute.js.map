{"version":3,"file":"solveRoute.js","sourceRoot":"","sources":["../../src/solveRoute.ts"],"names":[],"mappings":"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","sourcesContent":["/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  ILocation,\n  IPoint,\n  IFeature,\n  IFeatureSet\n} from \"@esri/arcgis-rest-request\";\n\nimport {\n  ARCGIS_ONLINE_ROUTING_URL,\n  IEndpointOptions,\n  decompressGeometry,\n  isFeatureSet\n} from \"./helpers.js\";\n\nimport { arcgisToGeoJSON } from \"@terraformer/arcgis\";\n\ninterface IFeatureWithCompressedGeometry extends IFeature {\n  compressedGeometry?: string;\n}\n\ninterface IFeatureSetWithGeoJson extends IFeatureSet {\n  geoJson?: {};\n}\n\nexport interface ISolveRouteOptions extends IEndpointOptions {\n  /**\n   * Specify two or more locations between which the route is to be found.\n   */\n  stops:\n    | Array<IPoint | ILocation | [number, number] | [number, number, number]>\n    | IFeatureSet;\n}\n\nexport interface ISolveRouteResponse {\n  messages: string[];\n  checksum: string;\n  routes: IFeatureSetWithGeoJson;\n  directions?: Array<{\n    routeId: number;\n    routeName: string;\n    summary: object;\n    features: IFeature[];\n  }>;\n}\n\nfunction isLocationArray(\n  coords: ILocation | IPoint | [number, number] | [number, number, number]\n): coords is [number, number] | [number, number, number] {\n  return (\n    (coords as [number, number]).length === 2 ||\n    (coords as [number, number, number]).length === 3\n  );\n}\n\nfunction isLocation(\n  coords: ILocation | IPoint | [number, number] | [number, number, number]\n): coords is ILocation {\n  return (\n    (coords as ILocation).latitude !== undefined ||\n    (coords as ILocation).lat !== undefined\n  );\n}\n\n/**\n * Used to find the best way to get from one location to another or to visit several locations. See the [REST Documentation](https://developers.arcgis.com/rest/network/api-reference/route-synchronous-service.htm) for more information.\n *\n * ```js\n * import { solveRoute } from '@esri/arcgis-rest-routing';\n *\n * solveRoute({\n *   stops: [\n *     [-117.195677, 34.056383],\n *     [-117.918976, 33.812092],\n *    ],\n *    authentication\n * })\n *   .then(response) // => {routes: {features: [{attributes: { ... }, geometry:{ ... }}]}\n * ```\n *\n * @param requestOptions Options to pass through to the routing service.\n * @returns A Promise that will resolve with routes and directions for the request.\n * @restlink https://developers.arcgis.com/rest/network/api-reference/route-synchronous-service.htm\n */\nexport function solveRoute(\n  requestOptions: ISolveRouteOptions\n): Promise<ISolveRouteResponse> {\n  const options: ISolveRouteOptions = {\n    endpoint: requestOptions.endpoint || ARCGIS_ONLINE_ROUTING_URL,\n    params: {},\n    ...requestOptions\n  };\n\n  // the SAAS service does not support anonymous requests\n  if (\n    !requestOptions.authentication &&\n    options.endpoint === ARCGIS_ONLINE_ROUTING_URL\n  ) {\n    return Promise.reject(\n      \"Routing using the ArcGIS service requires authentication\"\n    );\n  }\n\n  if (isFeatureSet(requestOptions.stops)) {\n    options.params.stops = requestOptions.stops;\n  } else {\n    const stops: string[] = requestOptions.stops.map((coords) => {\n      if (isLocationArray(coords)) {\n        return coords.join();\n      } else if (isLocation(coords)) {\n        if (coords.lat) {\n          return (\n            coords.long + \",\" + coords.lat + (coords.z ? \",\" + coords.z : \"\")\n          );\n        } else {\n          return (\n            coords.longitude +\n            \",\" +\n            coords.latitude +\n            (coords.z ? \",\" + coords.z : \"\")\n          );\n        }\n      } else {\n        return coords.x + \",\" + coords.y + (coords.z ? \",\" + coords.z : \"\");\n      }\n    });\n\n    options.params.stops = stops.join(\";\");\n  }\n\n  return request(`${cleanUrl(options.endpoint)}/solve`, options).then(\n    cleanResponse\n  );\n}\n\nfunction cleanResponse(res: any): ISolveRouteResponse {\n  if (res.directions && res.directions.length > 0) {\n    res.directions = res.directions.map(\n      (direction: {\n        features: IFeatureWithCompressedGeometry[];\n        routeId: number;\n        routeName: string;\n        summary: {};\n      }) => {\n        direction.features = direction.features.map(\n          (feature: IFeatureWithCompressedGeometry) => {\n            feature.geometry = decompressGeometry(feature.compressedGeometry);\n            return feature;\n          }\n        );\n        return direction;\n      }\n    );\n  }\n\n  // add \"geoJson\" property to \"routes\"\n  if (res.routes.spatialReference.wkid === 4326) {\n    const features = res.routes.features.map((feature: any) => {\n      return {\n        type: \"Feature\",\n        geometry: arcgisToGeoJSON(feature.geometry),\n        properties: Object.assign({}, feature.attributes)\n      };\n    });\n\n    res.routes.geoJson = {\n      type: \"FeatureCollection\",\n      features\n    };\n  }\n  return res;\n}\n\nexport default {\n  solveRoute\n};\n"]}