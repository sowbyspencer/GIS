{"version":3,"file":"routing.umd.js","sources":["../../src/helpers.ts","../../../../node_modules/@terraformer/arcgis/dist/t-arcgis.esm.js","../../src/solveRoute.ts","../../src/closestFacility.ts","../../src/serviceArea.ts","../../src/originDestinationMatrix.ts"],"sourcesContent":["/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  IRequestOptions,\n  ILocation,\n  IPoint,\n  IPolyline,\n  Position2D,\n  IFeatureSet\n} from \"@esri/arcgis-rest-request\";\n\n// https always\nexport const ARCGIS_ONLINE_ROUTING_URL =\n  \"https://route.arcgis.com/arcgis/rest/services/World/Route/NAServer/Route_World\";\nexport const ARCGIS_ONLINE_CLOSEST_FACILITY_URL =\n  \"https://route.arcgis.com/arcgis/rest/services/World/ClosestFacility/NAServer/ClosestFacility_World\";\nexport const ARCGIS_ONLINE_SERVICE_AREA_URL =\n  \"https://route.arcgis.com/arcgis/rest/services/World/ServiceAreas/NAServer/ServiceArea_World\";\nexport const ARCGIS_ONLINE_ORIGIN_DESTINATION_MATRIX_URL =\n  \"https://route.arcgis.com/arcgis/rest/services/World/OriginDestinationCostMatrix/NAServer/OriginDestinationCostMatrix_World\";\n\n// nice to have: verify custom endpoints contain 'NAServer' and end in a '/'\nexport interface IEndpointOptions extends IRequestOptions {\n  /**\n   * Any ArcGIS Routing service (example: https://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Network/USA/NAServer/Route/ ) to use for the routing service request.\n   */\n  endpoint?: string;\n}\n\nfunction isLocationArray(\n  coords: ILocation | IPoint | [number, number] | [number, number, number]\n): coords is [number, number] | [number, number, number] {\n  return (\n    (coords as [number, number]).length === 2 ||\n    (coords as [number, number, number]).length === 3\n  );\n}\n\nfunction isLocation(\n  coords: ILocation | IPoint | [number, number] | [number, number, number]\n): coords is ILocation {\n  return (\n    (coords as ILocation).latitude !== undefined ||\n    (coords as ILocation).lat !== undefined\n  );\n}\n\nexport function normalizeLocationsList(\n  locations: Array<IPoint | ILocation | [number, number]>\n): string[] {\n  return locations.map((coords) => {\n    if (isLocationArray(coords)) {\n      return coords.join();\n    } else if (isLocation(coords)) {\n      if (coords.lat) {\n        return coords.long + \",\" + coords.lat;\n      } else {\n        return coords.longitude + \",\" + coords.latitude;\n      }\n    } else {\n      return coords.x + \",\" + coords.y;\n    }\n  });\n}\n\nexport function decompressGeometry(str: string) {\n  let xDiffPrev = 0;\n  let yDiffPrev = 0;\n  const points = [];\n  let x;\n  let y;\n\n  // Split the string into an array on the + and - characters\n  const strings = str.match(/((\\+|-)[^+-]+)/g);\n\n  // The first value is the coefficient in base 32\n  const coefficient = parseInt(strings[0], 32);\n\n  for (let j = 1; j < strings.length; j += 2) {\n    // j is the offset for the x value\n    // Convert the value from base 32 and add the previous x value\n    x = parseInt(strings[j], 32) + xDiffPrev;\n    xDiffPrev = x;\n\n    // j+1 is the offset for the y value\n    // Convert the value from base 32 and add the previous y value\n    y = parseInt(strings[j + 1], 32) + yDiffPrev;\n    yDiffPrev = y;\n\n    points.push([x / coefficient, y / coefficient] as Position2D);\n  }\n\n  return {\n    paths: [points]\n  } as IPolyline;\n}\n\n/**\n * User Defined Type Guard that verifies this is a featureSet\n */\nexport function isFeatureSet(arg: any): arg is IFeatureSet {\n  return Object.prototype.hasOwnProperty.call(arg, \"features\");\n}\n\n/**\n * User Defined Type Guard that verifies this is a JSON with `url` property\n */\nexport function isJsonWithURL(arg: any): arg is Object {\n  return \"url\" in arg;\n}\n","/* @preserve\n* @terraformer/arcgis - v2.0.7 - MIT\n* Copyright (c) 2012-2021 Environmental Systems Research Institute, Inc.\n* Thu Jul 22 2021 13:58:30 GMT-0700 (Pacific Daylight Time)\n*/\n/* Copyright (c) 2012-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nvar edgeIntersectsEdge = function edgeIntersectsEdge(a1, a2, b1, b2) {\n  var uaT = (b2[0] - b1[0]) * (a1[1] - b1[1]) - (b2[1] - b1[1]) * (a1[0] - b1[0]);\n  var ubT = (a2[0] - a1[0]) * (a1[1] - b1[1]) - (a2[1] - a1[1]) * (a1[0] - b1[0]);\n  var uB = (b2[1] - b1[1]) * (a2[0] - a1[0]) - (b2[0] - b1[0]) * (a2[1] - a1[1]);\n\n  if (uB !== 0) {\n    var ua = uaT / uB;\n    var ub = ubT / uB;\n\n    if (ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {\n      return true;\n    }\n  }\n\n  return false;\n};\nvar coordinatesContainPoint = function coordinatesContainPoint(coordinates, point) {\n  var contains = false;\n\n  for (var i = -1, l = coordinates.length, j = l - 1; ++i < l; j = i) {\n    if ((coordinates[i][1] <= point[1] && point[1] < coordinates[j][1] || coordinates[j][1] <= point[1] && point[1] < coordinates[i][1]) && point[0] < (coordinates[j][0] - coordinates[i][0]) * (point[1] - coordinates[i][1]) / (coordinates[j][1] - coordinates[i][1]) + coordinates[i][0]) {\n      contains = !contains;\n    }\n  }\n\n  return contains;\n};\nvar pointsEqual = function pointsEqual(a, b) {\n  for (var i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\nvar arrayIntersectsArray = function arrayIntersectsArray(a, b) {\n  for (var i = 0; i < a.length - 1; i++) {\n    for (var j = 0; j < b.length - 1; j++) {\n      if (edgeIntersectsEdge(a[i], a[i + 1], b[j], b[j + 1])) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\n/* Copyright (c) 2012-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nvar closeRing = function closeRing(coordinates) {\n  if (!pointsEqual(coordinates[0], coordinates[coordinates.length - 1])) {\n    coordinates.push(coordinates[0]);\n  }\n\n  return coordinates;\n}; // determine if polygon ring coordinates are clockwise. clockwise signifies outer ring, counter-clockwise an inner ring\n// or hole. this logic was found at http://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-\n// points-are-in-clockwise-order\n\nvar ringIsClockwise = function ringIsClockwise(ringToTest) {\n  var total = 0;\n  var i = 0;\n  var rLength = ringToTest.length;\n  var pt1 = ringToTest[i];\n  var pt2;\n\n  for (i; i < rLength - 1; i++) {\n    pt2 = ringToTest[i + 1];\n    total += (pt2[0] - pt1[0]) * (pt2[1] + pt1[1]);\n    pt1 = pt2;\n  }\n\n  return total >= 0;\n}; // This function ensures that rings are oriented in the right directions\n// from http://jsperf.com/cloning-an-object/2\n\nvar shallowClone = function shallowClone(obj) {\n  var target = {};\n\n  for (var i in obj) {\n    // both arcgis attributes and geojson props are just hardcoded keys\n    if (obj.hasOwnProperty(i)) {\n      // eslint-disable-line no-prototype-builtins\n      target[i] = obj[i];\n    }\n  }\n\n  return target;\n};\n\n/* Copyright (c) 2012-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nvar coordinatesContainCoordinates = function coordinatesContainCoordinates(outer, inner) {\n  var intersects = arrayIntersectsArray(outer, inner);\n  var contains = coordinatesContainPoint(outer, inner[0]);\n\n  if (!intersects && contains) {\n    return true;\n  }\n\n  return false;\n}; // do any polygons in this array contain any other polygons in this array?\n// used for checking for holes in arcgis rings\n\n\nvar convertRingsToGeoJSON = function convertRingsToGeoJSON(rings) {\n  var outerRings = [];\n  var holes = [];\n  var x; // iterator\n\n  var outerRing; // current outer ring being evaluated\n\n  var hole; // current hole being evaluated\n  // for each ring\n\n  for (var r = 0; r < rings.length; r++) {\n    var ring = closeRing(rings[r].slice(0));\n\n    if (ring.length < 4) {\n      continue;\n    } // is this ring an outer ring? is it clockwise?\n\n\n    if (ringIsClockwise(ring)) {\n      var polygon = [ring.slice().reverse()]; // wind outer rings counterclockwise for RFC 7946 compliance\n\n      outerRings.push(polygon); // push to outer rings\n    } else {\n      holes.push(ring.slice().reverse()); // wind inner rings clockwise for RFC 7946 compliance\n    }\n  }\n\n  var uncontainedHoles = []; // while there are holes left...\n\n  while (holes.length) {\n    // pop a hole off out stack\n    hole = holes.pop(); // loop over all outer rings and see if they contain our hole.\n\n    var contained = false;\n\n    for (x = outerRings.length - 1; x >= 0; x--) {\n      outerRing = outerRings[x][0];\n\n      if (coordinatesContainCoordinates(outerRing, hole)) {\n        // the hole is contained push it into our polygon\n        outerRings[x].push(hole);\n        contained = true;\n        break;\n      }\n    } // ring is not contained in any outer ring\n    // sometimes this happens https://github.com/Esri/esri-leaflet/issues/320\n\n\n    if (!contained) {\n      uncontainedHoles.push(hole);\n    }\n  } // if we couldn't match any holes using contains we can try intersects...\n\n\n  while (uncontainedHoles.length) {\n    // pop a hole off out stack\n    hole = uncontainedHoles.pop(); // loop over all outer rings and see if any intersect our hole.\n\n    var intersects = false;\n\n    for (x = outerRings.length - 1; x >= 0; x--) {\n      outerRing = outerRings[x][0];\n\n      if (arrayIntersectsArray(outerRing, hole)) {\n        // the hole is contained push it into our polygon\n        outerRings[x].push(hole);\n        intersects = true;\n        break;\n      }\n    }\n\n    if (!intersects) {\n      outerRings.push([hole.reverse()]);\n    }\n  }\n\n  if (outerRings.length === 1) {\n    return {\n      type: 'Polygon',\n      coordinates: outerRings[0]\n    };\n  } else {\n    return {\n      type: 'MultiPolygon',\n      coordinates: outerRings\n    };\n  }\n};\n\nvar getId = function getId(attributes, idAttribute) {\n  var keys = idAttribute ? [idAttribute, 'OBJECTID', 'FID'] : ['OBJECTID', 'FID'];\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n\n    if (key in attributes && (typeof attributes[key] === 'string' || typeof attributes[key] === 'number')) {\n      return attributes[key];\n    }\n  }\n\n  throw Error('No valid id attribute found');\n};\n\nvar arcgisToGeoJSON = function arcgisToGeoJSON(arcgis, idAttribute) {\n  var geojson = {};\n\n  if (arcgis.features) {\n    geojson.type = 'FeatureCollection';\n    geojson.features = [];\n\n    for (var i = 0; i < arcgis.features.length; i++) {\n      geojson.features.push(arcgisToGeoJSON(arcgis.features[i], idAttribute));\n    }\n  }\n\n  if (typeof arcgis.x === 'number' && typeof arcgis.y === 'number') {\n    geojson.type = 'Point';\n    geojson.coordinates = [arcgis.x, arcgis.y];\n\n    if (typeof arcgis.z === 'number') {\n      geojson.coordinates.push(arcgis.z);\n    }\n  }\n\n  if (arcgis.points) {\n    geojson.type = 'MultiPoint';\n    geojson.coordinates = arcgis.points.slice(0);\n  }\n\n  if (arcgis.paths) {\n    if (arcgis.paths.length === 1) {\n      geojson.type = 'LineString';\n      geojson.coordinates = arcgis.paths[0].slice(0);\n    } else {\n      geojson.type = 'MultiLineString';\n      geojson.coordinates = arcgis.paths.slice(0);\n    }\n  }\n\n  if (arcgis.rings) {\n    geojson = convertRingsToGeoJSON(arcgis.rings.slice(0));\n  }\n\n  if (typeof arcgis.xmin === 'number' && typeof arcgis.ymin === 'number' && typeof arcgis.xmax === 'number' && typeof arcgis.ymax === 'number') {\n    geojson.type = 'Polygon';\n    geojson.coordinates = [[[arcgis.xmax, arcgis.ymax], [arcgis.xmin, arcgis.ymax], [arcgis.xmin, arcgis.ymin], [arcgis.xmax, arcgis.ymin], [arcgis.xmax, arcgis.ymax]]];\n  }\n\n  if (arcgis.geometry || arcgis.attributes) {\n    geojson.type = 'Feature';\n    geojson.geometry = arcgis.geometry ? arcgisToGeoJSON(arcgis.geometry) : null;\n    geojson.properties = arcgis.attributes ? shallowClone(arcgis.attributes) : null;\n\n    if (arcgis.attributes) {\n      try {\n        geojson.id = getId(arcgis.attributes, idAttribute);\n      } catch (err) {// don't set an id\n      }\n    }\n  } // if no valid geometry was encountered\n\n\n  if (JSON.stringify(geojson.geometry) === JSON.stringify({})) {\n    geojson.geometry = null;\n  }\n\n  if (arcgis.spatialReference && arcgis.spatialReference.wkid && arcgis.spatialReference.wkid !== 4326) {\n    console.warn('Object converted in non-standard crs - ' + JSON.stringify(arcgis.spatialReference));\n  }\n\n  return geojson;\n};\n\n/* Copyright (c) 2012-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n// outer rings are clockwise, holes are counterclockwise\n// used for converting GeoJSON Polygons to ArcGIS Polygons\n\nvar orientRings = function orientRings(poly) {\n  var output = [];\n  var polygon = poly.slice(0);\n  var outerRing = closeRing(polygon.shift().slice(0));\n\n  if (outerRing.length >= 4) {\n    if (!ringIsClockwise(outerRing)) {\n      outerRing.reverse();\n    }\n\n    output.push(outerRing);\n\n    for (var i = 0; i < polygon.length; i++) {\n      var hole = closeRing(polygon[i].slice(0));\n\n      if (hole.length >= 4) {\n        if (ringIsClockwise(hole)) {\n          hole.reverse();\n        }\n\n        output.push(hole);\n      }\n    }\n  }\n\n  return output;\n}; // This function flattens holes in multipolygons to one array of polygons\n// used for converting GeoJSON Polygons to ArcGIS Polygons\n\n\nvar flattenMultiPolygonRings = function flattenMultiPolygonRings(rings) {\n  var output = [];\n\n  for (var i = 0; i < rings.length; i++) {\n    var polygon = orientRings(rings[i]);\n\n    for (var x = polygon.length - 1; x >= 0; x--) {\n      var ring = polygon[x].slice(0);\n      output.push(ring);\n    }\n  }\n\n  return output;\n};\n\nvar geojsonToArcGIS = function geojsonToArcGIS(geojson, idAttribute) {\n  idAttribute = idAttribute || 'OBJECTID';\n  var spatialReference = {\n    wkid: 4326\n  };\n  var result = {};\n  var i;\n\n  switch (geojson.type) {\n    case 'Point':\n      result.x = geojson.coordinates[0];\n      result.y = geojson.coordinates[1];\n\n      if (geojson.coordinates[2]) {\n        result.z = geojson.coordinates[2];\n      }\n\n      result.spatialReference = spatialReference;\n      break;\n\n    case 'MultiPoint':\n      result.points = geojson.coordinates.slice(0);\n\n      if (geojson.coordinates[0][2]) {\n        result.hasZ = true;\n      }\n\n      result.spatialReference = spatialReference;\n      break;\n\n    case 'LineString':\n      result.paths = [geojson.coordinates.slice(0)];\n\n      if (geojson.coordinates[0][2]) {\n        result.hasZ = true;\n      }\n\n      result.spatialReference = spatialReference;\n      break;\n\n    case 'MultiLineString':\n      result.paths = geojson.coordinates.slice(0);\n\n      if (geojson.coordinates[0][0][2]) {\n        result.hasZ = true;\n      }\n\n      result.spatialReference = spatialReference;\n      break;\n\n    case 'Polygon':\n      result.rings = orientRings(geojson.coordinates.slice(0));\n\n      if (geojson.coordinates[0][0][2]) {\n        result.hasZ = true;\n      }\n\n      result.spatialReference = spatialReference;\n      break;\n\n    case 'MultiPolygon':\n      result.rings = flattenMultiPolygonRings(geojson.coordinates.slice(0));\n\n      if (geojson.coordinates[0][0][0][2]) {\n        result.hasZ = true;\n      }\n\n      result.spatialReference = spatialReference;\n      break;\n\n    case 'Feature':\n      if (geojson.geometry) {\n        result.geometry = geojsonToArcGIS(geojson.geometry, idAttribute);\n      }\n\n      result.attributes = geojson.properties ? shallowClone(geojson.properties) : {};\n\n      if (geojson.id) {\n        result.attributes[idAttribute] = geojson.id;\n      }\n\n      break;\n\n    case 'FeatureCollection':\n      result = [];\n\n      for (i = 0; i < geojson.features.length; i++) {\n        result.push(geojsonToArcGIS(geojson.features[i], idAttribute));\n      }\n\n      break;\n\n    case 'GeometryCollection':\n      result = [];\n\n      for (i = 0; i < geojson.geometries.length; i++) {\n        result.push(geojsonToArcGIS(geojson.geometries[i], idAttribute));\n      }\n\n      break;\n  }\n\n  return result;\n};\n\n/* Copyright (c) 2012-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nexport { arcgisToGeoJSON, geojsonToArcGIS };\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  ILocation,\n  IPoint,\n  IFeature,\n  IFeatureSet\n} from \"@esri/arcgis-rest-request\";\n\nimport {\n  ARCGIS_ONLINE_ROUTING_URL,\n  IEndpointOptions,\n  decompressGeometry,\n  isFeatureSet\n} from \"./helpers.js\";\n\nimport { arcgisToGeoJSON } from \"@terraformer/arcgis\";\n\ninterface IFeatureWithCompressedGeometry extends IFeature {\n  compressedGeometry?: string;\n}\n\ninterface IFeatureSetWithGeoJson extends IFeatureSet {\n  geoJson?: {};\n}\n\nexport interface ISolveRouteOptions extends IEndpointOptions {\n  /**\n   * Specify two or more locations between which the route is to be found.\n   */\n  stops:\n    | Array<IPoint | ILocation | [number, number] | [number, number, number]>\n    | IFeatureSet;\n}\n\nexport interface ISolveRouteResponse {\n  messages: string[];\n  checksum: string;\n  routes: IFeatureSetWithGeoJson;\n  directions?: Array<{\n    routeId: number;\n    routeName: string;\n    summary: object;\n    features: IFeature[];\n  }>;\n}\n\nfunction isLocationArray(\n  coords: ILocation | IPoint | [number, number] | [number, number, number]\n): coords is [number, number] | [number, number, number] {\n  return (\n    (coords as [number, number]).length === 2 ||\n    (coords as [number, number, number]).length === 3\n  );\n}\n\nfunction isLocation(\n  coords: ILocation | IPoint | [number, number] | [number, number, number]\n): coords is ILocation {\n  return (\n    (coords as ILocation).latitude !== undefined ||\n    (coords as ILocation).lat !== undefined\n  );\n}\n\n/**\n * Used to find the best way to get from one location to another or to visit several locations. See the [REST Documentation](https://developers.arcgis.com/rest/network/api-reference/route-synchronous-service.htm) for more information.\n *\n * ```js\n * import { solveRoute } from '@esri/arcgis-rest-routing';\n *\n * solveRoute({\n *   stops: [\n *     [-117.195677, 34.056383],\n *     [-117.918976, 33.812092],\n *    ],\n *    authentication\n * })\n *   .then(response) // => {routes: {features: [{attributes: { ... }, geometry:{ ... }}]}\n * ```\n *\n * @param requestOptions Options to pass through to the routing service.\n * @returns A Promise that will resolve with routes and directions for the request.\n * @restlink https://developers.arcgis.com/rest/network/api-reference/route-synchronous-service.htm\n */\nexport function solveRoute(\n  requestOptions: ISolveRouteOptions\n): Promise<ISolveRouteResponse> {\n  const options: ISolveRouteOptions = {\n    endpoint: requestOptions.endpoint || ARCGIS_ONLINE_ROUTING_URL,\n    params: {},\n    ...requestOptions\n  };\n\n  // the SAAS service does not support anonymous requests\n  if (\n    !requestOptions.authentication &&\n    options.endpoint === ARCGIS_ONLINE_ROUTING_URL\n  ) {\n    return Promise.reject(\n      \"Routing using the ArcGIS service requires authentication\"\n    );\n  }\n\n  if (isFeatureSet(requestOptions.stops)) {\n    options.params.stops = requestOptions.stops;\n  } else {\n    const stops: string[] = requestOptions.stops.map((coords) => {\n      if (isLocationArray(coords)) {\n        return coords.join();\n      } else if (isLocation(coords)) {\n        if (coords.lat) {\n          return (\n            coords.long + \",\" + coords.lat + (coords.z ? \",\" + coords.z : \"\")\n          );\n        } else {\n          return (\n            coords.longitude +\n            \",\" +\n            coords.latitude +\n            (coords.z ? \",\" + coords.z : \"\")\n          );\n        }\n      } else {\n        return coords.x + \",\" + coords.y + (coords.z ? \",\" + coords.z : \"\");\n      }\n    });\n\n    options.params.stops = stops.join(\";\");\n  }\n\n  return request(`${cleanUrl(options.endpoint)}/solve`, options).then(\n    cleanResponse\n  );\n}\n\nfunction cleanResponse(res: any): ISolveRouteResponse {\n  if (res.directions && res.directions.length > 0) {\n    res.directions = res.directions.map(\n      (direction: {\n        features: IFeatureWithCompressedGeometry[];\n        routeId: number;\n        routeName: string;\n        summary: {};\n      }) => {\n        direction.features = direction.features.map(\n          (feature: IFeatureWithCompressedGeometry) => {\n            feature.geometry = decompressGeometry(feature.compressedGeometry);\n            return feature;\n          }\n        );\n        return direction;\n      }\n    );\n  }\n\n  // add \"geoJson\" property to \"routes\"\n  if (res.routes.spatialReference.wkid === 4326) {\n    const features = res.routes.features.map((feature: any) => {\n      return {\n        type: \"Feature\",\n        geometry: arcgisToGeoJSON(feature.geometry),\n        properties: Object.assign({}, feature.attributes)\n      };\n    });\n\n    res.routes.geoJson = {\n      type: \"FeatureCollection\",\n      features\n    };\n  }\n  return res;\n}\n\nexport default {\n  solveRoute\n};\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  appendCustomParams,\n  ILocation,\n  IPoint,\n  IFeature,\n  IFeatureSet\n} from \"@esri/arcgis-rest-request\";\n\nimport {\n  ARCGIS_ONLINE_CLOSEST_FACILITY_URL,\n  IEndpointOptions,\n  normalizeLocationsList,\n  isFeatureSet,\n  isJsonWithURL\n} from \"./helpers.js\";\n\nimport { arcgisToGeoJSON } from \"@terraformer/arcgis\";\n\nexport interface IClosestFacilityOptions extends IEndpointOptions {\n  /**\n   * Specify one or more locations from which the service searches for the nearby locations. These locations are referred to as incidents.\n   */\n  incidents:\n    | Array<IPoint | ILocation | [number, number]>\n    | IFeatureSet\n    | { url: string };\n\n  /**\n   * Specify one or more locations that are searched for when finding the closest location.\n   */\n  facilities:\n    | Array<IPoint | ILocation | [number, number]>\n    | IFeatureSet\n    | { url: string };\n  /**\n   *  Specify if the service should return routes.\n   */\n  returnCFRoutes: boolean;\n  travelDirection?: \"incidentsToFacilities\" | \"facilitiesToIncidents\";\n  barriers?: Array<IPoint | ILocation | [number, number]> | IFeatureSet;\n  polylineBarriers?: IFeatureSet;\n  polygonBarriers?: IFeatureSet;\n  returnDirections?: boolean;\n  directionsOutputType?:\n    | \"esriDOTComplete\"\n    | \"esriDOTCompleteNoEvents\"\n    | \"esriDOTInstructionsOnly\"\n    | \"esriDOTStandard\"\n    | \"esriDOTSummaryOnly\"\n    | \"esriDOTFeatureSets\";\n  directionsLengthUnits?:\n    | \"esriNAUCentimeters\"\n    | \"esriNAUDecimalDegrees\"\n    | \"esriNAUDecimeters\"\n    | \"esriNAUFeet\"\n    | \"esriNAUInches\"\n    | \"esriNAUKilometers\"\n    | \"esriNAUMeters\"\n    | \"esriNAUMiles\"\n    | \"esriNAUMillimeters\"\n    | \"esriNAUNauticalMiles\"\n    | \"esriNAUPoints\"\n    | \"esriNAUYards\";\n  outputLines?: boolean;\n  returnFacilities?: boolean;\n  returnIncidents?: boolean;\n  returnBarriers?: boolean;\n  returnPolylineBarriers?: boolean;\n  returnPolygonBarriers?: boolean;\n  preserveObjectID?: boolean;\n}\n\ninterface IFeatureSetWithGeoJson extends IFeatureSet {\n  geoJson?: any;\n}\n\nexport interface IClosestFacilityResponse {\n  messages: string[];\n  routes?: IFeatureSetWithGeoJson;\n  directions?: Array<{\n    routeId: number;\n    routeName: string;\n    summary: object;\n    features: IFeature[];\n  }>;\n  incidents?: IFeatureSet;\n  facilities?: IFeatureSet;\n  barriers?: IFeatureSet;\n  polygonBarriers?: IFeatureSet;\n  polylineBarriers?: IFeatureSet;\n}\n\nfunction getTravelDirection(\n  key: \"incidentsToFacilities\" | \"facilitiesToIncidents\"\n): \"esriNATravelDirectionFromFacility\" | \"esriNATravelDirectionToFacility\" {\n  if (key === \"incidentsToFacilities\") {\n    return \"esriNATravelDirectionFromFacility\";\n  } else {\n    return \"esriNATravelDirectionToFacility\";\n  }\n}\n\n/**\n * Used to find a route to the nearest of several possible destinations. See the [REST Documentation](https://developers.arcgis.com/rest/network/api-reference/closest-facility-synchronous-service.htm) for more information.\n *\n * ```js\n * import { closestFacility } from '@esri/arcgis-rest-routing';\n *\n * closestFacility({\n *   incidents: [\n *     [-90.404302, 38.600621],\n *     [-90.364293, 38.620427],\n *    ],\n *   facilities: [\n *     [-90.444716, 38.635501],\n *     [-90.311919, 38.633523],\n *     [-90.451147, 38.581107]\n *    ],\n *    authentication\n * })\n *   .then(response) // => {routes: {features: [{attributes: { ... }, geometry:{ ... }}]}\n * ```\n *\n * @param requestOptions Options to pass through to the routing service.\n * @returns A Promise that will resolve with routes and directions for the request.\n * @restlink https://developers.arcgis.com/rest/network/api-reference/closest-facility-synchronous-service.htm\n * @inline IClosestFacilityOptions\n */\nexport function closestFacility(\n  requestOptions: IClosestFacilityOptions\n): Promise<IClosestFacilityResponse> {\n  const endpoint =\n    requestOptions.endpoint || ARCGIS_ONLINE_CLOSEST_FACILITY_URL;\n\n  requestOptions.params = {\n    returnFacilities: true,\n    returnDirections: true,\n    returnIncidents: true,\n    returnBarriers: true,\n    returnPolylineBarriers: true,\n    returnPolygonBarriers: true,\n    preserveObjectID: true,\n    ...requestOptions.params\n  };\n\n  const options = appendCustomParams<IClosestFacilityOptions>(requestOptions, [\n    \"returnCFRoutes\",\n    // \"travelDirection\",\n    \"barriers\",\n    \"polylineBarriers\",\n    \"polygonBarriers\",\n    \"returnDirections\",\n    \"directionsOutputType\",\n    \"directionsLengthUnits\",\n    \"outputLines\",\n    \"returnFacilities\",\n    \"returnIncidents\",\n    \"returnBarriers\",\n    \"returnPolylineBarriers\",\n    \"returnPolygonBarriers\",\n    \"preserveObjectID\"\n  ]);\n\n  // Set travelDirection\n  if (requestOptions.travelDirection) {\n    options.params.travelDirection = getTravelDirection(\n      requestOptions.travelDirection\n    );\n  }\n\n  // the SAAS service does not support anonymous requests\n  if (\n    !requestOptions.authentication &&\n    endpoint === ARCGIS_ONLINE_CLOSEST_FACILITY_URL\n  ) {\n    return Promise.reject(\n      \"Finding the closest facility using the ArcGIS service requires authentication\"\n    );\n  }\n\n  if (\n    isFeatureSet(requestOptions.incidents) ||\n    isJsonWithURL(requestOptions.incidents)\n  ) {\n    options.params.incidents = requestOptions.incidents;\n  } else {\n    options.params.incidents = normalizeLocationsList(\n      requestOptions.incidents\n    ).join(\";\");\n  }\n\n  if (\n    isFeatureSet(requestOptions.facilities) ||\n    isJsonWithURL(requestOptions.facilities)\n  ) {\n    options.params.facilities = requestOptions.facilities;\n  } else {\n    options.params.facilities = normalizeLocationsList(\n      requestOptions.facilities\n    ).join(\";\");\n  }\n\n  // optional input param that may need point geometry normalizing\n  if (requestOptions.barriers) {\n    if (isFeatureSet(requestOptions.barriers)) {\n      options.params.barriers = requestOptions.barriers;\n    } else {\n      // optional point geometry barriers must be normalized, too\n      // but not if provided as IFeatureSet type\n      // note that optional polylineBarriers and polygonBarriers do not need to be normalized\n      options.params.barriers = normalizeLocationsList(\n        requestOptions.barriers\n      ).join(\";\");\n    }\n  }\n\n  return request(`${cleanUrl(endpoint)}/solveClosestFacility`, options).then(\n    cleanResponse\n  );\n}\n\nfunction cleanResponse(res: any): IClosestFacilityResponse {\n  // add \"geoJson\" property to \"routes\"\n  if (res.routes.spatialReference.wkid === 4326) {\n    res.routes.geoJson = arcgisToGeoJSON(res.routes);\n  }\n  return res;\n}\n\nexport default {\n  closestFacility\n};\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  appendCustomParams,\n  ILocation,\n  IPoint,\n  IFeatureSet\n} from \"@esri/arcgis-rest-request\";\n\nimport {\n  ARCGIS_ONLINE_SERVICE_AREA_URL,\n  IEndpointOptions,\n  normalizeLocationsList,\n  isFeatureSet\n} from \"./helpers.js\";\n\nimport { arcgisToGeoJSON } from \"@terraformer/arcgis\";\n\nexport interface IServiceAreaOptions extends IEndpointOptions {\n  /**\n   *  Specify one or more locations around which service areas are generated.\n   */\n  facilities: Array<IPoint | ILocation | [number, number]> | IFeatureSet;\n  /**\n   *  Specify if the service should return routes.\n   */\n  travelDirection?: \"incidentsToFacilities\" | \"facilitiesToIncidents\";\n  barriers?: Array<IPoint | ILocation | [number, number]> | IFeatureSet;\n  polylineBarriers?: IFeatureSet;\n  polygonBarriers?: IFeatureSet;\n  outputLines?: boolean;\n  returnFacilities?: boolean;\n  returnBarriers?: boolean;\n  returnPolylineBarriers?: boolean;\n  returnPolygonBarriers?: boolean;\n  preserveObjectID?: boolean;\n}\n\ninterface IFeatureSetWithGeoJson extends IFeatureSet {\n  geoJson?: any;\n}\n\nexport interface IServiceAreaResponse {\n  messages: string[];\n  saPolygons?: IFeatureSetWithGeoJson;\n  incidents?: IFeatureSet;\n  facilities?: IFeatureSet;\n  barriers?: IFeatureSet;\n  polygonBarriers?: IFeatureSet;\n  polylineBarriers?: IFeatureSet;\n}\n\nfunction getTravelDirection(\n  key: \"incidentsToFacilities\" | \"facilitiesToIncidents\"\n): \"esriNATravelDirectionFromFacility\" | \"esriNATravelDirectionToFacility\" {\n  if (key === \"incidentsToFacilities\") {\n    return \"esriNATravelDirectionFromFacility\";\n  } else {\n    return \"esriNATravelDirectionToFacility\";\n  }\n}\n\n/**\n * Used to find the area that can be reached from the input location within a given travel time or travel distance. See the [REST Documentation](https://developers.arcgis.com/rest/network/api-reference/service-area-synchronous-service.htm) for more information.\n *\n * ```js\n * import { serviceArea } from '@esri/arcgis-rest-routing';\n *\n * serviceArea({\n *   facilities: [\n *     [-90.444716, 38.635501],\n *     [-90.311919, 38.633523],\n *     [-90.451147, 38.581107]\n *    ],\n *    authentication\n * })\n *   .then(response) // => {routes: {features: [{attributes: { ... }, geometry:{ ... }}]}\n * ```\n *\n * @param requestOptions Options to pass through to the routing service.\n * @returns A Promise that will resolve with service area polygons for the request.\n * @restlink https://developers.arcgis.com/rest/network/api-reference/service-area-synchronous-service.htm\n */\nexport function serviceArea(\n  requestOptions: IServiceAreaOptions\n): Promise<IServiceAreaResponse> {\n  const endpoint = requestOptions.endpoint || ARCGIS_ONLINE_SERVICE_AREA_URL;\n\n  requestOptions.params = {\n    returnFacilities: true,\n    returnBarriers: true,\n    returnPolylineBarriers: true,\n    returnPolygonBarriers: true,\n    preserveObjectID: true,\n    ...requestOptions.params\n  };\n\n  const options = appendCustomParams<IServiceAreaOptions>(requestOptions, [\n    \"barriers\",\n    \"polylineBarriers\",\n    \"polygonBarriers\",\n    \"outputLines\",\n    \"returnFacilities\",\n    \"returnBarriers\",\n    \"returnPolylineBarriers\",\n    \"returnPolygonBarriers\",\n    \"preserveObjectID\"\n  ]);\n\n  // Set travelDirection\n  if (requestOptions.travelDirection) {\n    options.params.travelDirection = getTravelDirection(\n      requestOptions.travelDirection\n    );\n  }\n\n  // the SAAS service does not support anonymous requests\n  if (\n    !requestOptions.authentication &&\n    endpoint === ARCGIS_ONLINE_SERVICE_AREA_URL\n  ) {\n    return Promise.reject(\n      \"Finding service areas using the ArcGIS service requires authentication\"\n    );\n  }\n\n  if (isFeatureSet(requestOptions.facilities)) {\n    options.params.facilities = requestOptions.facilities;\n  } else {\n    options.params.facilities = normalizeLocationsList(\n      requestOptions.facilities\n    ).join(\";\");\n  }\n\n  // optional input param that may need point geometry normalizing\n  if (requestOptions.barriers) {\n    if (isFeatureSet(requestOptions.barriers)) {\n      options.params.barriers = requestOptions.barriers;\n    } else {\n      // optional point geometry barriers must be normalized, too\n      // but not if provided as IFeatureSet type\n      // note that optional polylineBarriers and polygonBarriers do not need to be normalized\n      options.params.barriers = normalizeLocationsList(\n        requestOptions.barriers\n      ).join(\";\");\n    }\n  }\n\n  return request(`${cleanUrl(endpoint)}/solveServiceArea`, options).then(\n    cleanResponse\n  );\n}\n\nfunction cleanResponse(res: any): IServiceAreaResponse {\n  // remove \"fieldAliases\" because it does not do anything.\n  delete res.saPolygons.fieldAliases;\n\n  // add \"geoJson\" property to \"saPolygons\"\n  if (res.saPolygons.spatialReference.wkid === 4326) {\n    res.saPolygons.geoJson = arcgisToGeoJSON(res.saPolygons);\n  }\n  return res;\n}\n\nexport default {\n  serviceArea\n};\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  appendCustomParams,\n  IRequestOptions,\n  ILocation,\n  IPoint,\n  IFeatureSet\n} from \"@esri/arcgis-rest-request\";\n\nimport {\n  ARCGIS_ONLINE_ORIGIN_DESTINATION_MATRIX_URL,\n  IEndpointOptions,\n  normalizeLocationsList,\n  isFeatureSet\n} from \"./helpers.js\";\n\nimport { arcgisToGeoJSON } from \"@terraformer/arcgis\";\n\nexport interface IOriginDestinationMatrixOptions extends IEndpointOptions {\n  /**\n   *  Specify the starting points from which to travel to the destinations.\n   */\n  origins: Array<IPoint | ILocation | [number, number]> | IFeatureSet;\n  /**\n   *  Specify the ending point locations to travel to from the origins.\n   */\n  destinations: Array<IPoint | ILocation | [number, number]> | IFeatureSet;\n  /**\n   *  Specify the type of output returned by the service. Defaults to \"esriNAODOutputSparseMatrix\".\n   */\n  outputType?:\n    | \"esriNAODOutputSparseMatrix\"\n    | \"esriNAODOutputStraightLines\"\n    | \"esriNAODOutputNoLines\";\n  barriers?: Array<IPoint | ILocation | [number, number]> | IFeatureSet;\n  polylineBarriers?: IFeatureSet;\n  polygonBarriers?: IFeatureSet;\n  returnOrigins?: boolean;\n  returnDestinations?: boolean;\n  returnBarriers?: boolean;\n  returnPolylineBarriers?: boolean;\n  returnPolygonBarriers?: boolean;\n}\n\ninterface IFeatureSetWithGeoJson extends IFeatureSet {\n  geoJson?: any;\n}\n\nexport interface IOriginDestinationMatrixResponse {\n  messages: [{ type: number; description: string }];\n  /**\n   *  Only present if outputType is \"esriNAODOutputSparseMatrix\". Full description is available at https://developers.arcgis.com/rest/network/api-reference/origin-destination-cost-matrix-synchronous-service.htm#ESRI_SECTION2_114F8364507C4B56B780DFAD505270FB.\n   */\n  odCostMatrix?: any;\n  /**\n   *  Only present if outputType is \"esriNAODOutputStraightLines\" or \"esriNAODOutputNoLines\". Includes the geometry for the straight line connecting each origin-destination pair when the outputType is \"esriNAODOutputStraightLines\".\n   */\n  odLines?: IFeatureSetWithGeoJson;\n  origins?: IFeatureSetWithGeoJson;\n  destinations?: IFeatureSetWithGeoJson;\n  barriers?: IFeatureSetWithGeoJson;\n  polylineBarriers?: IFeatureSetWithGeoJson;\n  polygonBarriers?: IFeatureSetWithGeoJson;\n}\n\n/**\n * Used to create an origin-destination (OD) cost matrix from multiple origins to multiple destinations. See the [REST Documentation](https://developers.arcgis.com/rest/network/api-reference/origin-destination-cost-matrix-synchronous-service.htm) for more information.\n *\n * ```js\n * import { originDestinationMatrix } from '@esri/arcgis-rest-routing';\n *\n * originDestinationMatrix({\n *   origins: [\n *     [-90.404302, 38.600621],\n *     [-90.364293, 38.620427],\n *   ],\n *   destinations: [\n *     [-90.444716, 38.635501],\n *     [-90.311919, 38.633523],\n *     [-90.451147, 38.581107]\n *   ],\n *   authentication\n * })\n *   .then(response) // => { ... }\n * ```\n *\n * @param requestOptions Options to pass through to the routing service.\n * @returns A Promise that will resolve with travel time and/or distance for each origin-destination pair. It returns either odLines or odCostMatrix for this information depending on the outputType you specify.\n * @restlink https://developers.arcgis.com/rest/network/api-reference/origin-destination-cost-matrix-synchronous-service.htm\n */\nexport function originDestinationMatrix(\n  requestOptions: IOriginDestinationMatrixOptions\n): Promise<IOriginDestinationMatrixResponse> {\n  const endpoint =\n    requestOptions.endpoint || ARCGIS_ONLINE_ORIGIN_DESTINATION_MATRIX_URL;\n\n  requestOptions.params = {\n    outputType: \"esriNAODOutputSparseMatrix\",\n    returnOrigins: true,\n    returnDestinations: true,\n    returnBarriers: true,\n    returnPolylineBarriers: true,\n    returnPolygonBarriers: true,\n    ...requestOptions.params\n  };\n\n  const options = appendCustomParams<IOriginDestinationMatrixOptions>(\n    requestOptions,\n    [\n      \"outputType\",\n      \"barriers\",\n      \"polylineBarriers\",\n      \"polygonBarriers\",\n      \"returnOrigins\",\n      \"returnDestinations\",\n      \"returnBarriers\",\n      \"returnPolylineBarriers\",\n      \"returnPolygonBarriers\"\n    ]\n  );\n\n  // the SAAS service does not support anonymous requests\n  if (\n    !requestOptions.authentication &&\n    endpoint === ARCGIS_ONLINE_ORIGIN_DESTINATION_MATRIX_URL\n  ) {\n    return Promise.reject(\n      \"Calculating the origin-destination cost matrix using the ArcGIS service requires authentication\"\n    );\n  }\n\n  // use a formatting helper for input params of this type: Array<IPoint | ILocation | [number, number]>\n  if (isFeatureSet(requestOptions.origins)) {\n    options.params.origins = requestOptions.origins;\n  } else {\n    options.params.origins = normalizeLocationsList(\n      requestOptions.origins\n    ).join(\";\");\n  }\n\n  if (isFeatureSet(requestOptions.destinations)) {\n    options.params.destinations = requestOptions.destinations;\n  } else {\n    options.params.destinations = normalizeLocationsList(\n      requestOptions.destinations\n    ).join(\";\");\n  }\n\n  // optional input param that may need point geometry normalizing\n  if (requestOptions.barriers) {\n    if (isFeatureSet(requestOptions.barriers)) {\n      options.params.barriers = requestOptions.barriers;\n    } else {\n      // optional point geometry barriers must be normalized, too\n      // but not if provided as IFeatureSet type\n      // note that optional polylineBarriers and polygonBarriers do not need to be normalized\n      options.params.barriers = normalizeLocationsList(\n        requestOptions.barriers\n      ).join(\";\");\n    }\n  }\n\n  return request(`${cleanUrl(endpoint)}/solveODCostMatrix`, options).then(\n    function (res) {\n      return cleanResponse(res, options);\n    }\n  );\n}\n\nfunction cleanResponse(\n  res: any,\n  options: IRequestOptions\n): IOriginDestinationMatrixResponse {\n  // add \"geoJson\" property to each response property that is an arcgis featureSet\n\n  // res.odLines only exists and only includes geometry in this condition (out of 3 possible options.params.outputType conditions)\n  if (\n    options.params.outputType === \"esriNAODOutputStraightLines\" &&\n    res.odLines &&\n    res.odLines.spatialReference.wkid === 4326\n  ) {\n    res.odLines.geoJson = arcgisToGeoJSON(res.odLines);\n  }\n\n  if (res.origins && res.origins.spatialReference.wkid === 4326) {\n    res.origins.geoJson = arcgisToGeoJSON(res.origins);\n  }\n\n  if (res.destinations && res.destinations.spatialReference.wkid === 4326) {\n    res.destinations.geoJson = arcgisToGeoJSON(res.destinations);\n  }\n\n  if (res.barriers && res.barriers.spatialReference.wkid === 4326) {\n    res.barriers.geoJson = arcgisToGeoJSON(res.barriers);\n  }\n\n  if (\n    res.polygonBarriers &&\n    res.polygonBarriers.spatialReference.wkid === 4326\n  ) {\n    res.polygonBarriers.geoJson = arcgisToGeoJSON(res.polygonBarriers);\n  }\n\n  if (\n    res.polylineBarriers &&\n    res.polylineBarriers.spatialReference.wkid === 4326\n  ) {\n    res.polylineBarriers.geoJson = arcgisToGeoJSON(res.polylineBarriers);\n  }\n\n  return res;\n}\n\nexport default {\n  originDestinationMatrix\n};\n"],"names":["isLocationArray","isLocation","request","cleanUrl","cleanResponse","getTravelDirection","appendCustomParams"],"mappings":"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"}