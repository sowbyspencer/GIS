{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../../src/helpers.ts"],"names":[],"mappings":";AAAA;gBACgB;;;AAEhB,mEAAqE;AAErE,eAAe;AACF,QAAA,2BAA2B,GACtC,0EAA0E,CAAC;AAChE,QAAA,gCAAgC,GAC3C,sEAAsE,CAAC;AAkBzE;;;;;;;;;;;;;;GAcG;AACH,SAAgB,iBAAiB,CAC/B,cAAiC;IAEjC,MAAM,GAAG,GACP,CAAC,cAAc,IAAI,cAAc,CAAC,QAAQ,CAAC,IAAI,mCAA2B,CAAC;IAE7E,MAAM,OAAO,mBACX,UAAU,EAAE,KAAK,EACjB,YAAY,EAAE,IAAI,IACf,cAAc,CAClB,CAAC;IAEF,OAAO,IAAA,6BAAO,EAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AAC/B,CAAC;AAbD,8CAaC","sourcesContent":["/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, IRequestOptions } from \"@esri/arcgis-rest-request\";\n\n// https always\nexport const ARCGIS_ONLINE_GEOCODING_URL =\n  \"https://geocode-api.arcgis.com/arcgis/rest/services/World/GeocodeServer/\";\nexport const ARCGIS_ONLINE_BULK_GEOCODING_URL =\n  \"https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/\";\n\n// nice to have: verify custom endpoints contain 'GeocodeServer' and end in a '/'\nexport interface IEndpointOptions extends IRequestOptions {\n  /**\n   * Any ArcGIS Geocoding service (example: http://sampleserver6.arcgisonline.com/arcgis/rest/services/Locators/SanDiego/GeocodeServer )\n   */\n  endpoint?: string;\n}\n\nexport interface IGetGeocodeServiceResponse {\n  currentVersion: number;\n  serviceDescription: string;\n  addressFields: any[];\n  countries: string[];\n  capabilities: string;\n}\n\n/**\n * Used to fetch metadata from a geocoding service.\n *\n * ```js\n * import { getGeocoderServiceInfo } from '@esri/arcgis-rest-geocoding';\n *\n * getGeocoderServiceInfo()\n *   .then((response) => {\n *     response.serviceDescription; // => 'World Geocoder'\n *   });\n * ```\n *\n * @param requestOptions - Request options can contain a custom geocoding service to fetch metadata from.\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function getGeocodeService(\n  requestOptions?: IEndpointOptions\n): Promise<IGetGeocodeServiceResponse> {\n  const url =\n    (requestOptions && requestOptions.endpoint) || ARCGIS_ONLINE_GEOCODING_URL;\n\n  const options: IEndpointOptions = {\n    httpMethod: \"GET\",\n    maxUrlLength: 2000,\n    ...requestOptions\n  };\n\n  return request(url, options);\n}\n"]}