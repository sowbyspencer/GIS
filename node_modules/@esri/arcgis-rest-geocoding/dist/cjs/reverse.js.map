{"version":3,"file":"reverse.js","sourceRoot":"","sources":["../../src/reverse.ts"],"names":[],"mappings":";AAAA;gBACgB;;;AAEhB,mEAKmC;AAEnC,6CAA6E;AAS7E,SAAS,eAAe,CACtB,MAAwE;IAExE,OAAO,CACJ,MAA2B,CAAC,MAAM,KAAK,CAAC;QACxC,MAAmC,CAAC,MAAM,KAAK,CAAC,CAClD,CAAC;AACJ,CAAC;AAED,SAAS,UAAU,CACjB,MAAwE;IAExE,OAAO,CACJ,MAAoB,CAAC,QAAQ,KAAK,SAAS;QAC3C,MAAoB,CAAC,GAAG,KAAK,SAAS,CACxC,CAAC;AACJ,CAAC;AAED;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,SAAgB,cAAc,CAC5B,MAA6C,EAC7C,cAAiC;IAEjC,MAAM,OAAO,mBACX,QAAQ,EAAE,wCAA2B,EACrC,MAAM,EAAE,EAAE,IACP,cAAc,CAClB,CAAC;IAEF,IAAI,eAAe,CAAC,MAAM,CAAC,EAAE;QAC3B,OAAO,CAAC,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;KACzC;SAAM,IAAI,UAAU,CAAC,MAAM,CAAC,EAAE;QAC7B,IAAI,MAAM,CAAC,GAAG,EAAE;YACd,OAAO,CAAC,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,IAAI,GAAG,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;SAC1D;QACD,IAAI,MAAM,CAAC,QAAQ,EAAE;YACnB,OAAO,CAAC,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,SAAS,GAAG,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC;SACpE;KACF;SAAM;QACL,4FAA4F;QAC5F,OAAO,CAAC,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC;KAClC;IAED,OAAO,IAAA,6BAAO,EAAC,GAAG,IAAA,8BAAQ,EAAC,OAAO,CAAC,QAAQ,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC;AAC1E,CAAC;AAzBD,wCAyBC;AAED,kBAAe;IACb,cAAc;CACf,CAAC","sourcesContent":["/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  IPoint,\n  ILocation\n} from \"@esri/arcgis-rest-request\";\n\nimport { ARCGIS_ONLINE_GEOCODING_URL, IEndpointOptions } from \"./helpers.js\";\n\nexport interface IReverseGeocodeResponse {\n  address: {\n    [key: string]: any;\n  };\n  location: IPoint;\n}\n\nfunction isLocationArray(\n  coords: ILocation | IPoint | [number, number] | [number, number, number]\n): coords is [number, number] | [number, number, number] {\n  return (\n    (coords as [number, number]).length === 2 ||\n    (coords as [number, number, number]).length === 3\n  );\n}\n\nfunction isLocation(\n  coords: ILocation | IPoint | [number, number] | [number, number, number]\n): coords is ILocation {\n  return (\n    (coords as ILocation).latitude !== undefined ||\n    (coords as ILocation).lat !== undefined\n  );\n}\n\n/**\n * Used to determine the address of a [location](https://developers.arcgis.com/rest/geocode/api-reference/geocoding-reverse-geocode.htm).\n *\n * ```js\n * import { reverseGeocode } from '@esri/arcgis-rest-geocoding';\n * //\n * reverseGeocode([-118.409,33.943 ]) // long, lat\n *   .then((response) => {\n *     response.address.PlaceName; // => \"LA Airport\"\n *   });\n * // or\n * reverseGeocode({ long: -118.409, lat: 33.943 })\n * reverseGeocode({ latitude: 33.943, latitude: -118.409 })\n * reverseGeocode({ x: -118.409, y: 33.9425 }) // wgs84 is assumed\n * reverseGeocode({ x: -13181226, y: 4021085, spatialReference: { wkid: 3857 })\n * ```\n *\n * @param coordinates - the location you'd like to associate an address with.\n * @param requestOptions - Additional options for the request including authentication.\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function reverseGeocode(\n  coords: IPoint | ILocation | [number, number],\n  requestOptions?: IEndpointOptions\n): Promise<IReverseGeocodeResponse> {\n  const options: IEndpointOptions = {\n    endpoint: ARCGIS_ONLINE_GEOCODING_URL,\n    params: {},\n    ...requestOptions\n  };\n\n  if (isLocationArray(coords)) {\n    options.params.location = coords.join();\n  } else if (isLocation(coords)) {\n    if (coords.lat) {\n      options.params.location = coords.long + \",\" + coords.lat;\n    }\n    if (coords.latitude) {\n      options.params.location = coords.longitude + \",\" + coords.latitude;\n    }\n  } else {\n    // if input is a point, we can pass it straight through, with or without a spatial reference\n    options.params.location = coords;\n  }\n\n  return request(`${cleanUrl(options.endpoint)}/reverseGeocode`, options);\n}\n\nexport default {\n  reverseGeocode\n};\n"]}